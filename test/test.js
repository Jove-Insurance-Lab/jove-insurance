const Web3Ex=web3;
const stakingPoolToken = artifacts.require("StakingPoolToken");
const stakingPool = artifacts.require("StakingPool");
const Atoken = artifacts.require("AToken");
const ins3Product = artifacts.require('Ins3ProductToken');
const Ins3Rigister = artifacts.require("Ins3Register");

contract("StakingPoolToken", (accounts) => {
    let alice = accounts[0];
    let bob = accounts[1];
    let cc = accounts[2];
    let amount_new;
    let amounrt;
    it('staking pool token', async () => {
      const stakingpooltoken = await stakingPoolToken.deployed({from : alice});
      const ins3Rigister = await Ins3Rigister.deployed({from:alice});
      console.log(ins3Rigister.address);
      const stakingpool = await stakingPool.deployed({from : alice});
      const ins3product = await ins3Product.deployed({from : alice});
      await ins3product.updateRegisterAddress(ins3Rigister.address);
      //const AToken_byte = web3.utils.toHex("");
      await stakingpooltoken.registerStakingPool(stakingpool.address, "AToken");
      const name = await stakingpooltoken.getStakingPoolName(stakingpool.address);
      console.log(name);
      const atoken = await Atoken.deployed({from:alice});
      await atoken.mint(alice, 100);
      await atoken.mint(bob, 100);
      const accountOneStartingBalance = await atoken.balanceOf(alice);
      await atoken.approve(stakingpooltoken.address, 50, {from:alice});
      await atoken.approve(stakingpooltoken.address, 50, {from:bob});
      const addr = stakingpool.address;
      await stakingpool.setStakingPoolToken(stakingpooltoken.address);
      await stakingpool.setExpireTimestamp(1624982400);
      await stakingpooltoken.newTokenHolder(addr, 30, {from:alice});
      //await stakingpooltoken.newTokenHolder(addr, 5, {from:bob}); 
      //await stakingpooltoken.newTokenHolder(addr, 5, {from:cc}); 
      //await stakingpooltoken.updateTokenHolder("add", 5, {from:alice});
      //const amount = await stakingpooltoken.canReleaseTokenHolderAmount(0);
      //await stakingpooltoken.updateTokenHolder("sub", 5, {from:alice});
      //await stakingpooltoken.updateTokenHolder("sub", 6, {from:bob});
      //await stakingpooltoken.updateTokenHolder("sub", 5, {from:alice});
      //const amount = await atoken.balanceOf(alice);
      //assert.equal(15, Web3Ex.utils.toBN(accountOneStartingBalance).sub(Web3Ex.utils.toBN(amount)).toString(), "Amount wasn't correctly taken from the sender");
      console.log(alice);
      //const release_amount = await stakingpooltoken.tokenOfOwnerByIndex(alice, 0, {from : alice});
      //console.log(release_amount.toString());
      const release_amount = await stakingpooltoken.canReleaseTokenHolderAmount(0, {from:alice});
      console.log(release_amount.toString());
      const principal = await stakingpooltoken.getTokenHolderAmount(0, {from : alice});
      console.log(principal.toString());
      //await stakingpooltoken.updateTokenHolder("add", 10, {from:alice});
      //const new_principal = await stakingpooltoken.getTokenHolderAmount(0, {from : alice});
      //console.log(new_principal.toString());
      const h_alice = await stakingpool.getTotalStakingTimeAmount({from:alice});
      console.log(h_alice.toString());  
      //await stakingpooltoken.updateTokenHolder("sub", 8, {from:alice});
      //await stakingpooltoken.updateTokenHolder("sub", 2, {from:bob});
      //const reward_alice = await stakingpooltoken.getStakingTimeRewards(0, {from : alice});
      //console.log(reward_alice.toString());  
      const cap = await stakingpool.calculateCapacity({from:alice});
      console.log(cap.toString());   
      //await ins3product.setOwnable(alice, {from:alice});
      await stakingpool.setProductToken([ins3product.address]);
      await ins3product.setStakingPool(stakingpool.address, stakingpooltoken.address);
      await atoken.approve(ins3product.address, 50, {from:bob});
      const capacity = await ins3product.remaining();
      console.log(capacity.toString());
      const r = web3.utils.toHex("HH");
      const s = web3.utils.toHex("VV");  
      await ins3product.buy(bob, 20, 1, 1624982400, 20, r, s, {from:bob});
      amounrt = await atoken.balanceOf(alice, {from:alice});
      console.log(amounrt.toString());  
      amount_new = await atoken.balanceOf(stakingpooltoken.address);
      console.log(amount_new.toString());
      //await ins3product.close(false);
      amount_new = await atoken.balanceOf(bob , {from:bob});
      console.log(amount_new.toString()); 
      //await ins3product.setProductClaim("HHH");
      await ins3product.close(false, {from:alice});
      amount_new = await atoken.balanceOf(alice , {from:alice});
      console.log(amount_new.toString());  
      await stakingpooltoken.periodUpdateRewards({from:alice});
      await stakingpooltoken.harvestPremiums({from:alice});
      amount_new = await atoken.balanceOf(alice , {from:alice});
      console.log(amount_new.toString());        
    });
});
